
ST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b0  080027b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027b0  080027b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b0  080027b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080027c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080027c4  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a706  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aad  00000000  00000000  0002a73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002cce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015165  00000000  00000000  0002d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bca6  00000000  00000000  00042875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895ab  00000000  00000000  0004e51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7ac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  000d7b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002758 	.word	0x08002758

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002758 	.word	0x08002758

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fc5a 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f8a2 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f942 	bl	80004b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022c:	f000 f8e6 	bl	80003fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000230:	4b42      	ldr	r3, [pc, #264]	; (800033c <main+0x120>)
 8000232:	0018      	movs	r0, r3
 8000234:	f001 fe56 	bl	8001ee4 <HAL_TIM_Base_Start_IT>
  timecount = 0;
 8000238:	4b41      	ldr	r3, [pc, #260]	; (8000340 <main+0x124>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
  swdtime = 0;
 800023e:	4b41      	ldr	r3, [pc, #260]	; (8000344 <main+0x128>)
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (swdtime == 0){
 8000244:	4b3f      	ldr	r3, [pc, #252]	; (8000344 <main+0x128>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d130      	bne.n	80002ae <main+0x92>
		  if (timecount>SWD_TIME){
 800024c:	4b3c      	ldr	r3, [pc, #240]	; (8000340 <main+0x124>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a3d      	ldr	r2, [pc, #244]	; (8000348 <main+0x12c>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d9f6      	bls.n	8000244 <main+0x28>
			  USER_GPIO_Init();
 8000256:	f000 fab7 	bl	80007c8 <USER_GPIO_Init>

			  HAL_GPIO_WritePin(PICK_UP_OUT_GPIO_Port, PICK_UP_OUT_Pin, GPIO_PIN_SET);
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	0159      	lsls	r1, r3, #5
 800025e:	23a0      	movs	r3, #160	; 0xa0
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2201      	movs	r2, #1
 8000264:	0018      	movs	r0, r3
 8000266:	f000 ff40 	bl	80010ea <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OPEN_OUT_GPIO_Port, OPEN_OUT_Pin, GPIO_PIN_SET);
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	0199      	lsls	r1, r3, #6
 800026e:	23a0      	movs	r3, #160	; 0xa0
 8000270:	05db      	lsls	r3, r3, #23
 8000272:	2201      	movs	r2, #1
 8000274:	0018      	movs	r0, r3
 8000276:	f000 ff38 	bl	80010ea <HAL_GPIO_WritePin>
			  ringDet.state = HAL_GPIO_ReadPin(RING_DET_GPIO_Port, RING_DET_Pin)==GPIO_PIN_SET?1:0;
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	01da      	lsls	r2, r3, #7
 800027e:	23a0      	movs	r3, #160	; 0xa0
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	0011      	movs	r1, r2
 8000284:	0018      	movs	r0, r3
 8000286:	f000 ff13 	bl	80010b0 <HAL_GPIO_ReadPin>
 800028a:	0003      	movs	r3, r0
 800028c:	3b01      	subs	r3, #1
 800028e:	425a      	negs	r2, r3
 8000290:	4153      	adcs	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	001a      	movs	r2, r3
 8000296:	4b2d      	ldr	r3, [pc, #180]	; (800034c <main+0x130>)
 8000298:	731a      	strb	r2, [r3, #12]
			  swdtime = 1;
 800029a:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <main+0x128>)
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
			  signalPin.state=0;
 80002a0:	4b2b      	ldr	r3, [pc, #172]	; (8000350 <main+0x134>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
			  signalPin.last_time_change = 0;
 80002a6:	4b2a      	ldr	r3, [pc, #168]	; (8000350 <main+0x134>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	e7ca      	b.n	8000244 <main+0x28>
//
//			Serial.printf("updatevar = %d\ntime = %d\nfirstime = %d\nlastime = %d\nringpin = %d\n",updatevar,timecount,ringDet.first_time_change,ringDet.last_time_change,digitalRead(RING_DET_PIN)==HIGH?1:0);
//			updatevar=0;
//		  }

		  switch (state_machine){
 80002ae:	4b29      	ldr	r3, [pc, #164]	; (8000354 <main+0x138>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <main+0xa0>
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d02f      	beq.n	800031a <main+0xfe>
			case 1:
				if (timecount-timeoutCount>WAIT_TIMEOUT){
					state_machine=0;
				}
			  default:
			  break;
 80002ba:	e03c      	b.n	8000336 <main+0x11a>
			if (ringDet.state){
 80002bc:	4b23      	ldr	r3, [pc, #140]	; (800034c <main+0x130>)
 80002be:	7b1b      	ldrb	r3, [r3, #12]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d0bf      	beq.n	8000244 <main+0x28>
			  if (timecount-ringDet.first_time_change > RING_TIME){
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <main+0x124>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b20      	ldr	r3, [pc, #128]	; (800034c <main+0x130>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <main+0x13c>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d92e      	bls.n	8000332 <main+0x116>
				state_machine = 1;
 80002d4:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <main+0x138>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
				ringDet.state=0;
 80002da:	4b1c      	ldr	r3, [pc, #112]	; (800034c <main+0x130>)
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
				HAL_GPIO_WritePin(OPEN_OUT_GPIO_Port, OPEN_OUT_Pin, GPIO_PIN_RESET);
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	0199      	lsls	r1, r3, #6
 80002e4:	23a0      	movs	r3, #160	; 0xa0
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2200      	movs	r2, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fefd 	bl	80010ea <HAL_GPIO_WritePin>
				HAL_Delay(OPEN_TIME);
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0x140>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fc76 	bl	8000be4 <HAL_Delay>
				HAL_GPIO_WritePin(OPEN_OUT_GPIO_Port, OPEN_OUT_Pin, GPIO_PIN_SET);
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	0199      	lsls	r1, r3, #6
 80002fc:	23a0      	movs	r3, #160	; 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	2201      	movs	r2, #1
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fef1 	bl	80010ea <HAL_GPIO_WritePin>
				HAL_Delay(HANG_UP_TIME);
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <main+0x144>)
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fc6a 	bl	8000be4 <HAL_Delay>
				timeoutCount=timecount;
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <main+0x124>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <main+0x148>)
 8000316:	601a      	str	r2, [r3, #0]
			  break;
 8000318:	e00b      	b.n	8000332 <main+0x116>
				if (timecount-timeoutCount>WAIT_TIMEOUT){
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <main+0x124>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <main+0x148>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	4a10      	ldr	r2, [pc, #64]	; (8000368 <main+0x14c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d905      	bls.n	8000336 <main+0x11a>
					state_machine=0;
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <main+0x138>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
			  break;
 8000330:	e001      	b.n	8000336 <main+0x11a>
			  break;
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	e786      	b.n	8000244 <main+0x28>
			  break;
 8000336:	46c0      	nop			; (mov r8, r8)
	  if (swdtime == 0){
 8000338:	e784      	b.n	8000244 <main+0x28>
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	20000028 	.word	0x20000028
 8000340:	20000074 	.word	0x20000074
 8000344:	2000007c 	.word	0x2000007c
 8000348:	00004e20 	.word	0x00004e20
 800034c:	20000080 	.word	0x20000080
 8000350:	20000098 	.word	0x20000098
 8000354:	2000007d 	.word	0x2000007d
 8000358:	00009c40 	.word	0x00009c40
 800035c:	00002710 	.word	0x00002710
 8000360:	00001388 	.word	0x00001388
 8000364:	20000078 	.word	0x20000078
 8000368:	000927c0 	.word	0x000927c0

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b093      	sub	sp, #76	; 0x4c
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	2410      	movs	r4, #16
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2338      	movs	r3, #56	; 0x38
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 f9e3 	bl	8002748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	2310      	movs	r3, #16
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 f9dc 	bl	8002748 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	0018      	movs	r0, r3
 8000396:	f000 feef 	bl	8001178 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039a:	193b      	adds	r3, r7, r4
 800039c:	2202      	movs	r2, #2
 800039e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	0052      	lsls	r2, r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ae:	193b      	adds	r3, r7, r4
 80003b0:	2240      	movs	r2, #64	; 0x40
 80003b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 ff1b 	bl	80011f8 <HAL_RCC_OscConfig>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003c6:	f000 fab7 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	003b      	movs	r3, r7
 80003cc:	2207      	movs	r2, #7
 80003ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	003b      	movs	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e2:	003b      	movs	r3, r7
 80003e4:	2100      	movs	r1, #0
 80003e6:	0018      	movs	r0, r3
 80003e8:	f001 fa20 	bl	800182c <HAL_RCC_ClockConfig>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003f0:	f000 faa2 	bl	8000938 <Error_Handler>
  }
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b013      	add	sp, #76	; 0x4c
 80003fa:	bd90      	pop	{r4, r7, pc}

080003fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	2310      	movs	r3, #16
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	0018      	movs	r0, r3
 8000408:	2310      	movs	r3, #16
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f002 f99b 	bl	8002748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	0018      	movs	r0, r3
 8000416:	230c      	movs	r3, #12
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f002 f994 	bl	8002748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <MX_TIM1_Init+0xac>)
 8000422:	4a22      	ldr	r2, [pc, #136]	; (80004ac <MX_TIM1_Init+0xb0>)
 8000424:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000426:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MX_TIM1_Init+0xac>)
 8000428:	220f      	movs	r2, #15
 800042a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <MX_TIM1_Init+0xac>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_TIM1_Init+0xac>)
 8000434:	2263      	movs	r2, #99	; 0x63
 8000436:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_TIM1_Init+0xac>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_TIM1_Init+0xac>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_TIM1_Init+0xac>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_TIM1_Init+0xac>)
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fcf1 	bl	8001e34 <HAL_TIM_Base_Init>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000456:	f000 fa6f 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045a:	2110      	movs	r1, #16
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	0152      	lsls	r2, r2, #5
 8000462:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000464:	187a      	adds	r2, r7, r1
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <MX_TIM1_Init+0xac>)
 8000468:	0011      	movs	r1, r2
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fec0 	bl	80021f0 <HAL_TIM_ConfigClockSource>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000474:	f000 fa60 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800048a:	1d3a      	adds	r2, r7, #4
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_TIM1_Init+0xac>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f002 f8b5 	bl	8002600 <HAL_TIMEx_MasterConfigSynchronization>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800049a:	f000 fa4d 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b008      	add	sp, #32
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000028 	.word	0x20000028
 80004ac:	40012c00 	.word	0x40012c00

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	240c      	movs	r4, #12
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2314      	movs	r3, #20
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f002 f941 	bl	8002748 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <MX_GPIO_Init+0xc8>)
 80004c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_GPIO_Init+0xc8>)
 80004cc:	2102      	movs	r1, #2
 80004ce:	430a      	orrs	r2, r1
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <MX_GPIO_Init+0xc8>)
 80004d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d6:	2202      	movs	r2, #2
 80004d8:	4013      	ands	r3, r2
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <MX_GPIO_Init+0xc8>)
 80004e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_GPIO_Init+0xc8>)
 80004e4:	2101      	movs	r1, #1
 80004e6:	430a      	orrs	r2, r1
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <MX_GPIO_Init+0xc8>)
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	2201      	movs	r2, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PICK_UP_OUT_GPIO_Port, PICK_UP_OUT_Pin, GPIO_PIN_SET);
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	0159      	lsls	r1, r3, #5
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	2201      	movs	r2, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fdf2 	bl	80010ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIGNAL_READ_Pin PICK_UP_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_READ_Pin|PICK_UP_DET_Pin;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2281      	movs	r2, #129	; 0x81
 800050a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2288      	movs	r2, #136	; 0x88
 8000510:	0352      	lsls	r2, r2, #13
 8000512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	193b      	adds	r3, r7, r4
 800051c:	4a17      	ldr	r2, [pc, #92]	; (800057c <MX_GPIO_Init+0xcc>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f000 fc61 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PICK_UP_OUT_Pin */
  GPIO_InitStruct.Pin = PICK_UP_OUT_Pin;
 8000526:	0021      	movs	r1, r4
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	0152      	lsls	r2, r2, #5
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2211      	movs	r2, #17
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PICK_UP_OUT_GPIO_Port, &GPIO_InitStruct);
 8000542:	187a      	adds	r2, r7, r1
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fc4c 	bl	8000de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2005      	movs	r0, #5
 8000556:	f000 fc15 	bl	8000d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fc27 	bl	8000dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	2007      	movs	r0, #7
 8000566:	f000 fc0d 	bl	8000d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800056a:	2007      	movs	r0, #7
 800056c:	f000 fc1f 	bl	8000dae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b009      	add	sp, #36	; 0x24
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	50000400 	.word	0x50000400

08000580 <ring_det_isr>:

/* USER CODE BEGIN 4 */

void ring_det_isr(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	uint8_t pinstate = HAL_GPIO_ReadPin(RING_DET_GPIO_Port, RING_DET_Pin)==1? 1:0;
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	01da      	lsls	r2, r3, #7
 800058a:	23a0      	movs	r3, #160	; 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	0011      	movs	r1, r2
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fd8d 	bl	80010b0 <HAL_GPIO_ReadPin>
 8000596:	0003      	movs	r3, r0
 8000598:	3b01      	subs	r3, #1
 800059a:	425a      	negs	r2, r3
 800059c:	4153      	adcs	r3, r2
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
	  switch (state_machine){
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <ring_det_isr+0x74>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d11c      	bne.n	80005e6 <ring_det_isr+0x66>
	    case 0:
	    if (pinstate && !ringDet.state){
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ring_det_isr+0x4c>
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <ring_det_isr+0x78>)
 80005b6:	7b1b      	ldrb	r3, [r3, #12]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d107      	bne.n	80005cc <ring_det_isr+0x4c>
	      ringDet.first_time_change = timecount;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <ring_det_isr+0x7c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <ring_det_isr+0x78>)
 80005c2:	605a      	str	r2, [r3, #4]
	      ringDet.state = 1;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <ring_det_isr+0x78>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	731a      	strb	r2, [r3, #12]
//	      updatevar=2;
	    }else if(!pinstate && ringDet.state){
	      ringDet.last_time_change = timecount;
//	      updatevar=3;
	    }
	    break;
 80005ca:	e00e      	b.n	80005ea <ring_det_isr+0x6a>
	    }else if(!pinstate && ringDet.state){
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10a      	bne.n	80005ea <ring_det_isr+0x6a>
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <ring_det_isr+0x78>)
 80005d6:	7b1b      	ldrb	r3, [r3, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d006      	beq.n	80005ea <ring_det_isr+0x6a>
	      ringDet.last_time_change = timecount;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <ring_det_isr+0x7c>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <ring_det_isr+0x78>)
 80005e2:	601a      	str	r2, [r3, #0]
	    break;
 80005e4:	e001      	b.n	80005ea <ring_det_isr+0x6a>
	    default:
	    break;
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	e000      	b.n	80005ec <ring_det_isr+0x6c>
	    break;
 80005ea:	46c0      	nop			; (mov r8, r8)
	  }
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b002      	add	sp, #8
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000007d 	.word	0x2000007d
 80005f8:	20000080 	.word	0x20000080
 80005fc:	20000074 	.word	0x20000074

08000600 <pick_up_det_isr>:

void pick_up_det_isr(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
//  if (pinstate){
////	  state_machine=0;
//	  ringDet.state=0;
//
//  }
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <signal_read_isr>:

void signal_read_isr(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	signalPin.period = timecount - signalPin.last_time_change;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <signal_read_isr+0x48>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <signal_read_isr+0x4c>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	1ad2      	subs	r2, r2, r3
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <signal_read_isr+0x4c>)
 800061c:	609a      	str	r2, [r3, #8]
	signalPin.last_time_change = timecount;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <signal_read_isr+0x48>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <signal_read_isr+0x4c>)
 8000624:	605a      	str	r2, [r3, #4]
	if (signalPin.period>MIN_PERIOD && signalPin.period<MAX_PERIOD){
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <signal_read_isr+0x4c>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	2b05      	cmp	r3, #5
 800062c:	d90f      	bls.n	800064e <signal_read_isr+0x42>
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <signal_read_isr+0x4c>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	2b63      	cmp	r3, #99	; 0x63
 8000634:	d80b      	bhi.n	800064e <signal_read_isr+0x42>
		signalPin.count++;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <signal_read_isr+0x4c>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <signal_read_isr+0x4c>)
 800063e:	60da      	str	r2, [r3, #12]
		if (signalPin.count > MIN_COUNT){
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <signal_read_isr+0x4c>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	2b0a      	cmp	r3, #10
 8000646:	d902      	bls.n	800064e <signal_read_isr+0x42>
			signalPin.state=1;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <signal_read_isr+0x4c>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000074 	.word	0x20000074
 8000658:	20000098 	.word	0x20000098

0800065c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	0002      	movs	r2, r0
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	801a      	strh	r2, [r3, #0]
	if (swdtime){
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d017      	beq.n	80006a0 <HAL_GPIO_EXTI_Falling_Callback+0x44>
		switch(pin){
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	01d2      	lsls	r2, r2, #7
 8000678:	4293      	cmp	r3, r2
 800067a:	d008      	beq.n	800068e <HAL_GPIO_EXTI_Falling_Callback+0x32>
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	01d2      	lsls	r2, r2, #7
 8000680:	4293      	cmp	r3, r2
 8000682:	dc0f      	bgt.n	80006a4 <HAL_GPIO_EXTI_Falling_Callback+0x48>
 8000684:	2b01      	cmp	r3, #1
 8000686:	d005      	beq.n	8000694 <HAL_GPIO_EXTI_Falling_Callback+0x38>
 8000688:	2b80      	cmp	r3, #128	; 0x80
 800068a:	d006      	beq.n	800069a <HAL_GPIO_EXTI_Falling_Callback+0x3e>
				pick_up_det_isr();
				break;
			case SIGNAL_READ_Pin:
				signal_read_isr();
			default:
				break;
 800068c:	e00a      	b.n	80006a4 <HAL_GPIO_EXTI_Falling_Callback+0x48>
				ring_det_isr();
 800068e:	f7ff ff77 	bl	8000580 <ring_det_isr>
				break;
 8000692:	e008      	b.n	80006a6 <HAL_GPIO_EXTI_Falling_Callback+0x4a>
				pick_up_det_isr();
 8000694:	f7ff ffb4 	bl	8000600 <pick_up_det_isr>
				break;
 8000698:	e005      	b.n	80006a6 <HAL_GPIO_EXTI_Falling_Callback+0x4a>
				signal_read_isr();
 800069a:	f7ff ffb7 	bl	800060c <signal_read_isr>
				break;
 800069e:	e001      	b.n	80006a4 <HAL_GPIO_EXTI_Falling_Callback+0x48>

		}
	}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	e000      	b.n	80006a6 <HAL_GPIO_EXTI_Falling_Callback+0x4a>
				break;
 80006a4:	46c0      	nop			; (mov r8, r8)
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	2000007c 	.word	0x2000007c

080006b4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	0002      	movs	r2, r0
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	801a      	strh	r2, [r3, #0]
	if (swdtime){
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d017      	beq.n	80006f8 <HAL_GPIO_EXTI_Rising_Callback+0x44>
		switch(GPIO_Pin){
 80006c8:	1dbb      	adds	r3, r7, #6
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	01d2      	lsls	r2, r2, #7
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d008      	beq.n	80006e6 <HAL_GPIO_EXTI_Rising_Callback+0x32>
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	01d2      	lsls	r2, r2, #7
 80006d8:	4293      	cmp	r3, r2
 80006da:	dc0f      	bgt.n	80006fc <HAL_GPIO_EXTI_Rising_Callback+0x48>
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d005      	beq.n	80006ec <HAL_GPIO_EXTI_Rising_Callback+0x38>
 80006e0:	2b80      	cmp	r3, #128	; 0x80
 80006e2:	d006      	beq.n	80006f2 <HAL_GPIO_EXTI_Rising_Callback+0x3e>
				pick_up_det_isr();
				break;
			case SIGNAL_READ_Pin:
				signal_read_isr();
			default:
				break;
 80006e4:	e00a      	b.n	80006fc <HAL_GPIO_EXTI_Rising_Callback+0x48>
				ring_det_isr();
 80006e6:	f7ff ff4b 	bl	8000580 <ring_det_isr>
				break;
 80006ea:	e008      	b.n	80006fe <HAL_GPIO_EXTI_Rising_Callback+0x4a>
				pick_up_det_isr();
 80006ec:	f7ff ff88 	bl	8000600 <pick_up_det_isr>
				break;
 80006f0:	e005      	b.n	80006fe <HAL_GPIO_EXTI_Rising_Callback+0x4a>
				signal_read_isr();
 80006f2:	f7ff ff8b 	bl	800060c <signal_read_isr>
				break;
 80006f6:	e001      	b.n	80006fc <HAL_GPIO_EXTI_Rising_Callback+0x48>
		}
	}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	e000      	b.n	80006fe <HAL_GPIO_EXTI_Rising_Callback+0x4a>
				break;
 80006fc:	46c0      	nop			; (mov r8, r8)
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	2000007c 	.word	0x2000007c

0800070c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (htim == &htim1){
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000718:	429a      	cmp	r2, r3
 800071a:	d145      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		timecount++;
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000724:	601a      	str	r2, [r3, #0]
		if (swdtime){
 8000726:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d03c      	beq.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
			uint8_t ringPinState = HAL_GPIO_ReadPin(RING_DET_GPIO_Port, RING_DET_Pin)? 1:0;
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	01da      	lsls	r2, r3, #7
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fcb9 	bl	80010b0 <HAL_GPIO_ReadPin>
 800073e:	0003      	movs	r3, r0
 8000740:	1e5a      	subs	r2, r3, #1
 8000742:	4193      	sbcs	r3, r2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	210f      	movs	r1, #15
 8000748:	187b      	adds	r3, r7, r1
 800074a:	701a      	strb	r2, [r3, #0]

			  if (state_machine == 0){
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d113      	bne.n	800077c <HAL_TIM_PeriodElapsedCallback+0x70>
			    if (ringDet.state == 1){
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000756:	7b1b      	ldrb	r3, [r3, #12]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10f      	bne.n	800077c <HAL_TIM_PeriodElapsedCallback+0x70>
			      if (!ringPinState && timecount - ringDet.last_time_change> RING_TIMEOUT){
 800075c:	187b      	adds	r3, r7, r1
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10b      	bne.n	800077c <HAL_TIM_PeriodElapsedCallback+0x70>
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	23fa      	movs	r3, #250	; 0xfa
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	429a      	cmp	r2, r3
 8000774:	d902      	bls.n	800077c <HAL_TIM_PeriodElapsedCallback+0x70>
			        ringDet.state = 0;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000778:	2200      	movs	r2, #0
 800077a:	731a      	strb	r2, [r3, #12]
			    }
			  }
//			if (timecount%1000==0){
//				HAL_GPIO_TogglePin(PICK_UP_OUT_GPIO_Port, PICK_UP_OUT_Pin);
//			}
			  if ((timecount - signalPin.last_time_change>RING_TIMEOUT)){ //timeout signal ringing
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	1ad2      	subs	r2, r2, r3
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	429a      	cmp	r2, r3
 800078c:	d90c      	bls.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
				  signalPin.state=0;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				  signalPin.count=0;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
				  if (ringDet.state == 1){
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800079c:	7b1b      	ldrb	r3, [r3, #12]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d102      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
					  ringDet.state = 0;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	731a      	strb	r2, [r3, #12]
				  }
			  }
		}
	}
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b004      	add	sp, #16
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000028 	.word	0x20000028
 80007b4:	20000074 	.word	0x20000074
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	2000007d 	.word	0x2000007d
 80007c0:	20000080 	.word	0x20000080
 80007c4:	20000098 	.word	0x20000098

080007c8 <USER_GPIO_Init>:

static void USER_GPIO_Init(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	240c      	movs	r4, #12
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	2314      	movs	r3, #20
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f001 ffb5 	bl	8002748 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b53      	ldr	r3, [pc, #332]	; (800092c <USER_GPIO_Init+0x164>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e2:	4b52      	ldr	r3, [pc, #328]	; (800092c <USER_GPIO_Init+0x164>)
 80007e4:	2104      	movs	r1, #4
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ea:	4b50      	ldr	r3, [pc, #320]	; (800092c <USER_GPIO_Init+0x164>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ee:	2204      	movs	r2, #4
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b4d      	ldr	r3, [pc, #308]	; (800092c <USER_GPIO_Init+0x164>)
 80007f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fa:	4b4c      	ldr	r3, [pc, #304]	; (800092c <USER_GPIO_Init+0x164>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
 8000802:	4b4a      	ldr	r3, [pc, #296]	; (800092c <USER_GPIO_Init+0x164>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <USER_GPIO_Init+0x164>)
 8000810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000812:	4b46      	ldr	r3, [pc, #280]	; (800092c <USER_GPIO_Init+0x164>)
 8000814:	2102      	movs	r1, #2
 8000816:	430a      	orrs	r2, r1
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
 800081a:	4b44      	ldr	r3, [pc, #272]	; (800092c <USER_GPIO_Init+0x164>)
 800081c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081e:	2202      	movs	r2, #2
 8000820:	4013      	ands	r3, r2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, SIGNAL_WRITE_Pin|OPEN_OUT_Pin, GPIO_PIN_RESET);
 8000826:	4942      	ldr	r1, [pc, #264]	; (8000930 <USER_GPIO_Init+0x168>)
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	2200      	movs	r2, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fc5b 	bl	80010ea <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PICK_UP_OUT_GPIO_Port, PICK_UP_OUT_Pin, GPIO_PIN_SET);
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	0159      	lsls	r1, r3, #5
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2201      	movs	r2, #1
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fc53 	bl	80010ea <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : SIGNAL_READ_Pin */
	  GPIO_InitStruct.Pin = SIGNAL_READ_Pin;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(SIGNAL_READ_GPIO_Port, &GPIO_InitStruct);
 8000856:	193b      	adds	r3, r7, r4
 8000858:	4a36      	ldr	r2, [pc, #216]	; (8000934 <USER_GPIO_Init+0x16c>)
 800085a:	0019      	movs	r1, r3
 800085c:	0010      	movs	r0, r2
 800085e:	f000 fac3 	bl	8000de8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : SIGNAL_WIRTE_Pin OPEN_OUT_Pin */
	  GPIO_InitStruct.Pin = OPEN_OUT_Pin;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0192      	lsls	r2, r2, #6
 800086a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800086c:	000c      	movs	r4, r1
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2211      	movs	r2, #17
 8000872:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	193a      	adds	r2, r7, r4
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f000 faad 	bl	8000de8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PICK_UP_DET_Pin */
	  GPIO_InitStruct.Pin = SIGNAL_READ_Pin|PICK_UP_DET_Pin;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2281      	movs	r2, #129	; 0x81
 8000894:	601a      	str	r2, [r3, #0]
 	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2288      	movs	r2, #136	; 0x88
 800089a:	0352      	lsls	r2, r2, #13
 800089c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	000c      	movs	r4, r1
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	4a22      	ldr	r2, [pc, #136]	; (8000934 <USER_GPIO_Init+0x16c>)
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f000 fa9b 	bl	8000de8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PICK_UP_OUT_Pin */
	  GPIO_InitStruct.Pin = PICK_UP_OUT_Pin;
 80008b2:	0021      	movs	r1, r4
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	0152      	lsls	r2, r2, #5
 80008ba:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008bc:	000c      	movs	r4, r1
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2211      	movs	r2, #17
 80008c2:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(PICK_UP_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d0:	193a      	adds	r2, r7, r4
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fa85 	bl	8000de8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : RING_DET_Pin */
	  GPIO_InitStruct.Pin = RING_DET_Pin;
 80008de:	0021      	movs	r1, r4
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	01d2      	lsls	r2, r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2288      	movs	r2, #136	; 0x88
 80008ec:	0352      	lsls	r2, r2, #13
 80008ee:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(RING_DET_GPIO_Port, &GPIO_InitStruct);
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fa72 	bl	8000de8 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2005      	movs	r0, #5
 800090a:	f000 fa3b 	bl	8000d84 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800090e:	2005      	movs	r0, #5
 8000910:	f000 fa4d 	bl	8000dae <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2007      	movs	r0, #7
 800091a:	f000 fa33 	bl	8000d84 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800091e:	2007      	movs	r0, #7
 8000920:	f000 fa45 	bl	8000dae <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b009      	add	sp, #36	; 0x24
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	00002004 	.word	0x00002004
 8000934:	50000400 	.word	0x50000400

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_MspInit+0x44>)
 800094c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_MspInit+0x44>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	641a      	str	r2, [r3, #64]	; 0x40
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_MspInit+0x44>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x44>)
 8000964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_MspInit+0x44>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0549      	lsls	r1, r1, #21
 800096c:	430a      	orrs	r2, r1
 800096e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_MspInit+0x44>)
 8000972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	055b      	lsls	r3, r3, #21
 8000978:	4013      	ands	r3, r2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b08f      	sub	sp, #60	; 0x3c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000994:	2410      	movs	r4, #16
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	2328      	movs	r3, #40	; 0x28
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f001 fed2 	bl	8002748 <memset>
  if(htim_base->Instance==TIM1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <HAL_TIM_Base_MspInit+0x74>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d124      	bne.n	80009f8 <HAL_TIM_Base_MspInit+0x6c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	0392      	lsls	r2, r2, #14
 80009b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 f8be 	bl	8001b40 <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80009c8:	f7ff ffb6 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_TIM_Base_MspInit+0x78>)
 80009ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_TIM_Base_MspInit+0x78>)
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	0109      	lsls	r1, r1, #4
 80009d6:	430a      	orrs	r2, r1
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_TIM_Base_MspInit+0x78>)
 80009dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	4013      	ands	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	200d      	movs	r0, #13
 80009ee:	f000 f9c9 	bl	8000d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80009f2:	200d      	movs	r0, #13
 80009f4:	f000 f9db 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b00f      	add	sp, #60	; 0x3c
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f8be 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PICK_UP_DET_Pin);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fb72 	bl	8001124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_READ_Pin);
 8000a4a:	2080      	movs	r0, #128	; 0x80
 8000a4c:	f000 fb6a 	bl	8001124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  HAL_GPIO_EXTI_IRQHandler(RING_DET_Pin);
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	01db      	lsls	r3, r3, #7
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fb65 	bl	8001124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 fa90 	bl	8001f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000028 	.word	0x20000028

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a88:	f7ff fff6 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ab2:	f001 fe25 	bl	8002700 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ab6:	f7ff fbb1 	bl	800021c <main>

08000aba <LoopForever>:

LoopForever:
  b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   r0, =_estack
 8000abc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac8:	080027b8 	.word	0x080027b8
  ldr r2, =_sbss
 8000acc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad0:	200000ac 	.word	0x200000ac

08000ad4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_Init+0x3c>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Init+0x3c>)
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	0049      	lsls	r1, r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f810 	bl	8000b18 <HAL_InitTick>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e001      	b.n	8000b08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff ff1e 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	230f      	movs	r3, #15
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_InitTick+0x88>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d02b      	beq.n	8000b88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_InitTick+0x8c>)
 8000b32:	681c      	ldr	r4, [r3, #0]
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_InitTick+0x88>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	0019      	movs	r1, r3
 8000b3a:	23fa      	movs	r3, #250	; 0xfa
 8000b3c:	0098      	lsls	r0, r3, #2
 8000b3e:	f7ff fae1 	bl	8000104 <__udivsi3>
 8000b42:	0003      	movs	r3, r0
 8000b44:	0019      	movs	r1, r3
 8000b46:	0020      	movs	r0, r4
 8000b48:	f7ff fadc 	bl	8000104 <__udivsi3>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 f93d 	bl	8000dce <HAL_SYSTICK_Config>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d112      	bne.n	8000b7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d80a      	bhi.n	8000b74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f90c 	bl	8000d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_InitTick+0x90>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e00d      	b.n	8000b90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b74:	230f      	movs	r3, #15
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e008      	b.n	8000b90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7e:	230f      	movs	r3, #15
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e003      	b.n	8000b90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b90:	230f      	movs	r3, #15
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	781b      	ldrb	r3, [r3, #0]
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b005      	add	sp, #20
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x1c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	18d2      	adds	r2, r2, r3
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_IncTick+0x20>)
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	200000a8 	.word	0x200000a8

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <HAL_GetTick+0x10>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	200000a8 	.word	0x200000a8

08000be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff fff0 	bl	8000bd0 <HAL_GetTick>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Delay+0x44>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	001a      	movs	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	189b      	adds	r3, r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	f7ff ffe0 	bl	8000bd0 <HAL_GetTick>
 8000c10:	0002      	movs	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	20000008 	.word	0x20000008

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	0002      	movs	r2, r0
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c3e:	d809      	bhi.n	8000c54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	001a      	movs	r2, r3
 8000c46:	231f      	movs	r3, #31
 8000c48:	401a      	ands	r2, r3
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_EnableIRQ+0x30>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4091      	lsls	r1, r2
 8000c50:	000a      	movs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b7f      	cmp	r3, #127	; 0x7f
 8000c74:	d828      	bhi.n	8000cc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c76:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <__NVIC_SetPriority+0xd4>)
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	33c0      	adds	r3, #192	; 0xc0
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	589b      	ldr	r3, [r3, r2]
 8000c86:	1dfa      	adds	r2, r7, #7
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	400a      	ands	r2, r1
 8000c90:	00d2      	lsls	r2, r2, #3
 8000c92:	21ff      	movs	r1, #255	; 0xff
 8000c94:	4091      	lsls	r1, r2
 8000c96:	000a      	movs	r2, r1
 8000c98:	43d2      	mvns	r2, r2
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	22ff      	movs	r2, #255	; 0xff
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0018      	movs	r0, r3
 8000cac:	2303      	movs	r3, #3
 8000cae:	4003      	ands	r3, r0
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb4:	481f      	ldr	r0, [pc, #124]	; (8000d34 <__NVIC_SetPriority+0xd4>)
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	33c0      	adds	r3, #192	; 0xc0
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cc6:	e031      	b.n	8000d2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <__NVIC_SetPriority+0xd8>)
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0019      	movs	r1, r3
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	3b08      	subs	r3, #8
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3306      	adds	r3, #6
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	3304      	adds	r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	1dfa      	adds	r2, r7, #7
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	2203      	movs	r2, #3
 8000cea:	400a      	ands	r2, r1
 8000cec:	00d2      	lsls	r2, r2, #3
 8000cee:	21ff      	movs	r1, #255	; 0xff
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	43d2      	mvns	r2, r2
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	019b      	lsls	r3, r3, #6
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	401a      	ands	r2, r3
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	0018      	movs	r0, r3
 8000d08:	2303      	movs	r3, #3
 8000d0a:	4003      	ands	r3, r0
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <__NVIC_SetPriority+0xd8>)
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	001c      	movs	r4, r3
 8000d18:	230f      	movs	r3, #15
 8000d1a:	4023      	ands	r3, r4
 8000d1c:	3b08      	subs	r3, #8
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	430a      	orrs	r2, r1
 8000d22:	3306      	adds	r3, #6
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	18c3      	adds	r3, r0, r3
 8000d28:	3304      	adds	r3, #4
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b003      	add	sp, #12
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	1e5a      	subs	r2, r3, #1
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	045b      	lsls	r3, r3, #17
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d301      	bcc.n	8000d54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d50:	2301      	movs	r3, #1
 8000d52:	e010      	b.n	8000d76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <SysTick_Config+0x44>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	2103      	movs	r1, #3
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff ff7c 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x44>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x44>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	0018      	movs	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	210f      	movs	r1, #15
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	1c02      	adds	r2, r0, #0
 8000d94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	0002      	movs	r2, r0
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ff33 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff ffaf 	bl	8000d3c <SysTick_Config>
 8000dde:	0003      	movs	r3, r0
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	e147      	b.n	8001088 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4091      	lsls	r1, r2
 8000e02:	000a      	movs	r2, r1
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d100      	bne.n	8000e10 <HAL_GPIO_Init+0x28>
 8000e0e:	e138      	b.n	8001082 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <HAL_GPIO_Init+0x40>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2203      	movs	r2, #3
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	2201      	movs	r2, #1
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2203      	movs	r2, #3
 8000e90:	4013      	ands	r3, r2
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d017      	beq.n	8000ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d123      	bne.n	8000f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	58d3      	ldr	r3, [r2, r3]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2107      	movs	r1, #7
 8000efe:	400b      	ands	r3, r1
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	6939      	ldr	r1, [r7, #16]
 8000f18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2203      	movs	r2, #3
 8000f38:	401a      	ands	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	23c0      	movs	r3, #192	; 0xc0
 8000f54:	029b      	lsls	r3, r3, #10
 8000f56:	4013      	ands	r3, r2
 8000f58:	d100      	bne.n	8000f5c <HAL_GPIO_Init+0x174>
 8000f5a:	e092      	b.n	8001082 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f5c:	4a50      	ldr	r2, [pc, #320]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3318      	adds	r3, #24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	589b      	ldr	r3, [r3, r2]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	220f      	movs	r2, #15
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	23a0      	movs	r3, #160	; 0xa0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1ca>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a45      	ldr	r2, [pc, #276]	; (80010a4 <HAL_GPIO_Init+0x2bc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1c6>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <HAL_GPIO_Init+0x2c0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1c2>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a43      	ldr	r2, [pc, #268]	; (80010ac <HAL_GPIO_Init+0x2c4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1be>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x1cc>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x1cc>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x1cc>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x1cc>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	400a      	ands	r2, r1
 8000fba:	00d2      	lsls	r2, r2, #3
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fc4:	4936      	ldr	r1, [pc, #216]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3318      	adds	r3, #24
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	035b      	lsls	r3, r3, #13
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	039b      	lsls	r3, r3, #14
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8001028:	2384      	movs	r3, #132	; 0x84
 800102a:	58d3      	ldr	r3, [r2, r3]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	029b      	lsls	r3, r3, #10
 8001040:	4013      	ands	r3, r2
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800104c:	4914      	ldr	r1, [pc, #80]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 800104e:	2284      	movs	r2, #132	; 0x84
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	58d3      	ldr	r3, [r2, r3]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	4013      	ands	r3, r2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107a:	4909      	ldr	r1, [pc, #36]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	40da      	lsrs	r2, r3
 8001090:	1e13      	subs	r3, r2, #0
 8001092:	d000      	beq.n	8001096 <HAL_GPIO_Init+0x2ae>
 8001094:	e6b0      	b.n	8000df8 <HAL_GPIO_Init+0x10>
  }
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b006      	add	sp, #24
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021800 	.word	0x40021800
 80010a4:	50000400 	.word	0x50000400
 80010a8:	50000800 	.word	0x50000800
 80010ac:	50000c00 	.word	0x50000c00

080010b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	000a      	movs	r2, r1
 80010ba:	1cbb      	adds	r3, r7, #2
 80010bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	1cba      	adds	r2, r7, #2
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	4013      	ands	r3, r2
 80010c8:	d004      	beq.n	80010d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010ca:	230f      	movs	r3, #15
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e003      	b.n	80010dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010dc:	230f      	movs	r3, #15
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	781b      	ldrb	r3, [r3, #0]
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	0008      	movs	r0, r1
 80010f4:	0011      	movs	r1, r2
 80010f6:	1cbb      	adds	r3, r7, #2
 80010f8:	1c02      	adds	r2, r0, #0
 80010fa:	801a      	strh	r2, [r3, #0]
 80010fc:	1c7b      	adds	r3, r7, #1
 80010fe:	1c0a      	adds	r2, r1, #0
 8001100:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001102:	1c7b      	adds	r3, r7, #1
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	881a      	ldrh	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001112:	e003      	b.n	800111c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001114:	1cbb      	adds	r3, r7, #2
 8001116:	881a      	ldrh	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	1dbb      	adds	r3, r7, #6
 800112e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	1dba      	adds	r2, r7, #6
 8001136:	8812      	ldrh	r2, [r2, #0]
 8001138:	4013      	ands	r3, r2
 800113a:	d008      	beq.n	800114e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800113e:	1dba      	adds	r2, r7, #6
 8001140:	8812      	ldrh	r2, [r2, #0]
 8001142:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001144:	1dbb      	adds	r3, r7, #6
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff fab3 	bl	80006b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	1dba      	adds	r2, r7, #6
 8001154:	8812      	ldrh	r2, [r2, #0]
 8001156:	4013      	ands	r3, r2
 8001158:	d008      	beq.n	800116c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800115c:	1dba      	adds	r2, r7, #6
 800115e:	8812      	ldrh	r2, [r2, #0]
 8001160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001162:	1dbb      	adds	r3, r7, #6
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff fa78 	bl	800065c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021800 	.word	0x40021800

08001178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d11f      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	0013      	movs	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	189b      	adds	r3, r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4912      	ldr	r1, [pc, #72]	; (80011f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7fe ffaa 	bl	8000104 <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b6:	e008      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e001      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e009      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	401a      	ands	r2, r3
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	429a      	cmp	r2, r3
 80011da:	d0ed      	beq.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40007000 	.word	0x40007000
 80011ec:	fffff9ff 	.word	0xfffff9ff
 80011f0:	20000000 	.word	0x20000000
 80011f4:	000f4240 	.word	0x000f4240

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e2fe      	b.n	8001808 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x1e>
 8001214:	e07c      	b.n	8001310 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001216:	4bc3      	ldr	r3, [pc, #780]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2238      	movs	r2, #56	; 0x38
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001220:	4bc0      	ldr	r3, [pc, #768]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2203      	movs	r2, #3
 8001226:	4013      	ands	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b10      	cmp	r3, #16
 800122e:	d102      	bne.n	8001236 <HAL_RCC_OscConfig+0x3e>
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d002      	beq.n	800123c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d10b      	bne.n	8001254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	4bb9      	ldr	r3, [pc, #740]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d062      	beq.n	800130e <HAL_RCC_OscConfig+0x116>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d15e      	bne.n	800130e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e2d9      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	429a      	cmp	r2, r3
 800125e:	d107      	bne.n	8001270 <HAL_RCC_OscConfig+0x78>
 8001260:	4bb0      	ldr	r3, [pc, #704]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4baf      	ldr	r3, [pc, #700]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0249      	lsls	r1, r1, #9
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e020      	b.n	80012b2 <HAL_RCC_OscConfig+0xba>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	02db      	lsls	r3, r3, #11
 8001278:	429a      	cmp	r2, r3
 800127a:	d10e      	bne.n	800129a <HAL_RCC_OscConfig+0xa2>
 800127c:	4ba9      	ldr	r3, [pc, #676]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4ba8      	ldr	r3, [pc, #672]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	02c9      	lsls	r1, r1, #11
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	4ba6      	ldr	r3, [pc, #664]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4ba5      	ldr	r3, [pc, #660]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0249      	lsls	r1, r1, #9
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e00b      	b.n	80012b2 <HAL_RCC_OscConfig+0xba>
 800129a:	4ba2      	ldr	r3, [pc, #648]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4ba1      	ldr	r3, [pc, #644]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	49a1      	ldr	r1, [pc, #644]	; (8001528 <HAL_RCC_OscConfig+0x330>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	4b9f      	ldr	r3, [pc, #636]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b9e      	ldr	r3, [pc, #632]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	499f      	ldr	r1, [pc, #636]	; (800152c <HAL_RCC_OscConfig+0x334>)
 80012ae:	400a      	ands	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d014      	beq.n	80012e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fc89 	bl	8000bd0 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fc84 	bl	8000bd0 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e298      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d6:	4b93      	ldr	r3, [pc, #588]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xcc>
 80012e2:	e015      	b.n	8001310 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc74 	bl	8000bd0 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ee:	f7ff fc6f 	bl	8000bd0 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	; 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e283      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001300:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	4013      	ands	r3, r2
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0xf6>
 800130c:	e000      	b.n	8001310 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d100      	bne.n	800131c <HAL_RCC_OscConfig+0x124>
 800131a:	e099      	b.n	8001450 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131c:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2238      	movs	r2, #56	; 0x38
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001326:	4b7f      	ldr	r3, [pc, #508]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2203      	movs	r2, #3
 800132c:	4013      	ands	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b10      	cmp	r3, #16
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0x144>
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d002      	beq.n	8001342 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d135      	bne.n	80013ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001342:	4b78      	ldr	r3, [pc, #480]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4013      	ands	r3, r2
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x162>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e256      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b72      	ldr	r3, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a74      	ldr	r2, [pc, #464]	; (8001530 <HAL_RCC_OscConfig+0x338>)
 8001360:	4013      	ands	r3, r2
 8001362:	0019      	movs	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	4b6e      	ldr	r3, [pc, #440]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d112      	bne.n	800139c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001376:	4b6b      	ldr	r3, [pc, #428]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6e      	ldr	r2, [pc, #440]	; (8001534 <HAL_RCC_OscConfig+0x33c>)
 800137c:	4013      	ands	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	4b67      	ldr	r3, [pc, #412]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0adb      	lsrs	r3, r3, #11
 8001390:	2207      	movs	r2, #7
 8001392:	4013      	ands	r3, r2
 8001394:	4a68      	ldr	r2, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x340>)
 8001396:	40da      	lsrs	r2, r3
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x344>)
 800139a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800139c:	4b68      	ldr	r3, [pc, #416]	; (8001540 <HAL_RCC_OscConfig+0x348>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff fbb9 	bl	8000b18 <HAL_InitTick>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d051      	beq.n	800144e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e22c      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d030      	beq.n	8001418 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013b6:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5e      	ldr	r2, [pc, #376]	; (8001534 <HAL_RCC_OscConfig+0x33c>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	4b57      	ldr	r3, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013ca:	4b56      	ldr	r3, [pc, #344]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b55      	ldr	r3, [pc, #340]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	0049      	lsls	r1, r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fbfa 	bl	8000bd0 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fbf5 	bl	8000bd0 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e209      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f4:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b48      	ldr	r3, [pc, #288]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_RCC_OscConfig+0x338>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	021a      	lsls	r2, r3, #8
 8001410:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001412:	430a      	orrs	r2, r1
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e01b      	b.n	8001450 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001418:	4b42      	ldr	r3, [pc, #264]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800141e:	4949      	ldr	r1, [pc, #292]	; (8001544 <HAL_RCC_OscConfig+0x34c>)
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fbd4 	bl	8000bd0 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff fbcf 	bl	8000bd0 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e1e3      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001440:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4013      	ands	r3, r2
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x236>
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2208      	movs	r2, #8
 8001456:	4013      	ands	r3, r2
 8001458:	d047      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2238      	movs	r2, #56	; 0x38
 8001460:	4013      	ands	r3, r2
 8001462:	2b18      	cmp	r3, #24
 8001464:	d10a      	bne.n	800147c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d03c      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f2>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d138      	bne.n	80014ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e1c5      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d019      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001486:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800148a:	2101      	movs	r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fb9e 	bl	8000bd0 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fb99 	bl	8000bd0 <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1ad      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b0:	2202      	movs	r2, #2
 80014b2:	4013      	ands	r3, r2
 80014b4:	d0f1      	beq.n	800149a <HAL_RCC_OscConfig+0x2a2>
 80014b6:	e018      	b.n	80014ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014be:	2101      	movs	r1, #1
 80014c0:	438a      	bics	r2, r1
 80014c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb84 	bl	8000bd0 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fb7f 	bl	8000bd0 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e193      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	2202      	movs	r2, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	d1f1      	bne.n	80014ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2204      	movs	r2, #4
 80014f0:	4013      	ands	r3, r2
 80014f2:	d100      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2fe>
 80014f4:	e0c6      	b.n	8001684 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	231f      	movs	r3, #31
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2238      	movs	r2, #56	; 0x38
 8001504:	4013      	ands	r3, r2
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11e      	bne.n	8001548 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d100      	bne.n	8001516 <HAL_RCC_OscConfig+0x31e>
 8001514:	e0b6      	b.n	8001684 <HAL_RCC_OscConfig+0x48c>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d000      	beq.n	8001520 <HAL_RCC_OscConfig+0x328>
 800151e:	e0b1      	b.n	8001684 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e171      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
 8001524:	40021000 	.word	0x40021000
 8001528:	fffeffff 	.word	0xfffeffff
 800152c:	fffbffff 	.word	0xfffbffff
 8001530:	ffff80ff 	.word	0xffff80ff
 8001534:	ffffc7ff 	.word	0xffffc7ff
 8001538:	00f42400 	.word	0x00f42400
 800153c:	20000000 	.word	0x20000000
 8001540:	20000004 	.word	0x20000004
 8001544:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001548:	4bb1      	ldr	r3, [pc, #708]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800154a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	055b      	lsls	r3, r3, #21
 8001550:	4013      	ands	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x360>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x362>
 8001558:	2300      	movs	r3, #0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d011      	beq.n	8001582 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4bac      	ldr	r3, [pc, #688]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001562:	4bab      	ldr	r3, [pc, #684]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0549      	lsls	r1, r1, #21
 8001568:	430a      	orrs	r2, r1
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
 800156c:	4ba8      	ldr	r3, [pc, #672]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800156e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800157a:	231f      	movs	r3, #31
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001582:	4ba4      	ldr	r3, [pc, #656]	; (8001814 <HAL_RCC_OscConfig+0x61c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4013      	ands	r3, r2
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800158e:	4ba1      	ldr	r3, [pc, #644]	; (8001814 <HAL_RCC_OscConfig+0x61c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <HAL_RCC_OscConfig+0x61c>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0049      	lsls	r1, r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800159c:	f7ff fb18 	bl	8000bd0 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff fb13 	bl	8000bd0 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e127      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b8:	4b96      	ldr	r3, [pc, #600]	; (8001814 <HAL_RCC_OscConfig+0x61c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x3e2>
 80015cc:	4b90      	ldr	r3, [pc, #576]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80015ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015d8:	e01c      	b.n	8001614 <HAL_RCC_OscConfig+0x41c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x404>
 80015e2:	4b8b      	ldr	r3, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80015e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e6:	4b8a      	ldr	r3, [pc, #552]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80015e8:	2104      	movs	r1, #4
 80015ea:	430a      	orrs	r2, r1
 80015ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80015ee:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80015f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f2:	4b87      	ldr	r3, [pc, #540]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	430a      	orrs	r2, r1
 80015f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0x41c>
 80015fc:	4b84      	ldr	r3, [pc, #528]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80015fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001600:	4b83      	ldr	r3, [pc, #524]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001602:	2101      	movs	r1, #1
 8001604:	438a      	bics	r2, r1
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
 8001608:	4b81      	ldr	r3, [pc, #516]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800160a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800160c:	4b80      	ldr	r3, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800160e:	2104      	movs	r1, #4
 8001610:	438a      	bics	r2, r1
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d014      	beq.n	8001646 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fad8 	bl	8000bd0 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001624:	e009      	b.n	800163a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fad3 	bl	8000bd0 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	4a79      	ldr	r2, [pc, #484]	; (8001818 <HAL_RCC_OscConfig+0x620>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0e6      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163a:	4b75      	ldr	r3, [pc, #468]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x42e>
 8001644:	e013      	b.n	800166e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fac3 	bl	8000bd0 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800164e:	e009      	b.n	8001664 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fabe 	bl	8000bd0 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4a6f      	ldr	r2, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x620>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0d1      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2202      	movs	r2, #2
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800166e:	231f      	movs	r3, #31
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800167a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800167c:	4b64      	ldr	r3, [pc, #400]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800167e:	4967      	ldr	r1, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x624>)
 8001680:	400a      	ands	r2, r1
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x496>
 800168c:	e0bb      	b.n	8001806 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2238      	movs	r2, #56	; 0x38
 8001694:	4013      	ands	r3, r2
 8001696:	2b10      	cmp	r3, #16
 8001698:	d100      	bne.n	800169c <HAL_RCC_OscConfig+0x4a4>
 800169a:	e07b      	b.n	8001794 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d156      	bne.n	8001752 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80016aa:	495d      	ldr	r1, [pc, #372]	; (8001820 <HAL_RCC_OscConfig+0x628>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fa8e 	bl	8000bd0 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fa89 	bl	8000bd0 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e09d      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	049b      	lsls	r3, r3, #18
 80016d4:	4013      	ands	r3, r2
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d8:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a51      	ldr	r2, [pc, #324]	; (8001824 <HAL_RCC_OscConfig+0x62c>)
 80016de:	4013      	ands	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	431a      	orrs	r2, r3
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001708:	430a      	orrs	r2, r1
 800170a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0449      	lsls	r1, r1, #17
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0549      	lsls	r1, r1, #21
 8001724:	430a      	orrs	r2, r1
 8001726:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fa52 	bl	8000bd0 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fa4d 	bl	8000bd0 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e061      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	049b      	lsls	r3, r3, #18
 800174c:	4013      	ands	r3, r2
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x53a>
 8001750:	e059      	b.n	8001806 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001758:	4931      	ldr	r1, [pc, #196]	; (8001820 <HAL_RCC_OscConfig+0x628>)
 800175a:	400a      	ands	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff fa37 	bl	8000bd0 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fa32 	bl	8000bd0 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e046      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	049b      	lsls	r3, r3, #18
 8001782:	4013      	ands	r3, r2
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800178c:	4926      	ldr	r1, [pc, #152]	; (8001828 <HAL_RCC_OscConfig+0x630>)
 800178e:	400a      	ands	r2, r1
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	e038      	b.n	8001806 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e033      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2203      	movs	r2, #3
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d126      	bne.n	8001802 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2270      	movs	r2, #112	; 0x70
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d11f      	bne.n	8001802 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	23fe      	movs	r3, #254	; 0xfe
 80017c6:	01db      	lsls	r3, r3, #7
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d116      	bne.n	8001802 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	23f8      	movs	r3, #248	; 0xf8
 80017d8:	039b      	lsls	r3, r3, #14
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d10e      	bne.n	8001802 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	23e0      	movs	r3, #224	; 0xe0
 80017e8:	051b      	lsls	r3, r3, #20
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	0f5b      	lsrs	r3, r3, #29
 80017f8:	075a      	lsls	r2, r3, #29
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b008      	add	sp, #32
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	40007000 	.word	0x40007000
 8001818:	00001388 	.word	0x00001388
 800181c:	efffffff 	.word	0xefffffff
 8001820:	feffffff 	.word	0xfeffffff
 8001824:	11c1808c 	.word	0x11c1808c
 8001828:	eefefffc 	.word	0xeefefffc

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0e9      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2207      	movs	r2, #7
 8001846:	4013      	ands	r3, r2
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d91e      	bls.n	800188c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2207      	movs	r2, #7
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001860:	f7ff f9b6 	bl	8000bd0 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001868:	e009      	b.n	800187e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186a:	f7ff f9b1 	bl	8000bd0 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <HAL_RCC_ClockConfig+0x1f4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0ca      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2207      	movs	r2, #7
 8001884:	4013      	ands	r3, r2
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d1ee      	bne.n	800186a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2202      	movs	r2, #2
 8001892:	4013      	ands	r3, r2
 8001894:	d015      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2204      	movs	r2, #4
 800189c:	4013      	ands	r3, r2
 800189e:	d006      	beq.n	80018ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018a0:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80018a6:	21e0      	movs	r1, #224	; 0xe0
 80018a8:	01c9      	lsls	r1, r1, #7
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ae:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4a5d      	ldr	r2, [pc, #372]	; (8001a28 <HAL_RCC_ClockConfig+0x1fc>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	d057      	beq.n	800197c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	4013      	ands	r3, r2
 80018de:	d12b      	bne.n	8001938 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e097      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ec:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	049b      	lsls	r3, r3, #18
 80018f4:	4013      	ands	r3, r2
 80018f6:	d11f      	bne.n	8001938 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e08b      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	d113      	bne.n	8001938 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e07f      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d106      	bne.n	800192a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191c:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d108      	bne.n	8001938 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e074      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e06d      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2207      	movs	r2, #7
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 8001948:	430a      	orrs	r2, r1
 800194a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800194c:	f7ff f940 	bl	8000bd0 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001954:	e009      	b.n	800196a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001956:	f7ff f93b 	bl	8000bd0 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <HAL_RCC_ClockConfig+0x1f4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e054      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2238      	movs	r2, #56	; 0x38
 8001970:	401a      	ands	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	429a      	cmp	r2, r3
 800197a:	d1ec      	bne.n	8001956 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2207      	movs	r2, #7
 8001982:	4013      	ands	r3, r2
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d21e      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2207      	movs	r2, #7
 8001990:	4393      	bics	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800199c:	f7ff f918 	bl	8000bd0 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a4:	e009      	b.n	80019ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a6:	f7ff f913 	bl	8000bd0 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_RCC_ClockConfig+0x1f4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e02c      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2207      	movs	r2, #7
 80019c0:	4013      	ands	r3, r2
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2204      	movs	r2, #4
 80019ce:	4013      	ands	r3, r2
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <HAL_RCC_ClockConfig+0x200>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019e6:	f000 f829 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019ea:	0001      	movs	r1, r0
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_RCC_ClockConfig+0x1f8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	220f      	movs	r2, #15
 80019f4:	401a      	ands	r2, r3
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_RCC_ClockConfig+0x204>)
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	58d3      	ldr	r3, [r2, r3]
 80019fc:	221f      	movs	r2, #31
 80019fe:	4013      	ands	r3, r2
 8001a00:	000a      	movs	r2, r1
 8001a02:	40da      	lsrs	r2, r3
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_ClockConfig+0x208>)
 8001a06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x20c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff f883 	bl	8000b18 <HAL_InitTick>
 8001a12:	0003      	movs	r3, r0
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b004      	add	sp, #16
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	00001388 	.word	0x00001388
 8001a24:	40021000 	.word	0x40021000
 8001a28:	fffff0ff 	.word	0xfffff0ff
 8001a2c:	ffff8fff 	.word	0xffff8fff
 8001a30:	08002770 	.word	0x08002770
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a42:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2238      	movs	r2, #56	; 0x38
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d10f      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0adb      	lsrs	r3, r3, #11
 8001a52:	2207      	movs	r2, #7
 8001a54:	4013      	ands	r3, r2
 8001a56:	2201      	movs	r2, #1
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	4835      	ldr	r0, [pc, #212]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a62:	f7fe fb4f 	bl	8000104 <__udivsi3>
 8001a66:	0003      	movs	r3, r0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e05d      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a6c:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2238      	movs	r2, #56	; 0x38
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	e054      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2238      	movs	r2, #56	; 0x38
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d138      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	4824      	ldr	r0, [pc, #144]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001aac:	f7fe fb2a 	bl	8000104 <__udivsi3>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	227f      	movs	r2, #127	; 0x7f
 8001abc:	4013      	ands	r3, r2
 8001abe:	434b      	muls	r3, r1
 8001ac0:	617b      	str	r3, [r7, #20]
        break;
 8001ac2:	e00d      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	481c      	ldr	r0, [pc, #112]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ac8:	f7fe fb1c 	bl	8000104 <__udivsi3>
 8001acc:	0003      	movs	r3, r0
 8001ace:	0019      	movs	r1, r3
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	227f      	movs	r2, #127	; 0x7f
 8001ad8:	4013      	ands	r3, r2
 8001ada:	434b      	muls	r3, r1
 8001adc:	617b      	str	r3, [r7, #20]
        break;
 8001ade:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0f5b      	lsrs	r3, r3, #29
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4013      	ands	r3, r2
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f7fe fb07 	bl	8000104 <__udivsi3>
 8001af6:	0003      	movs	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e015      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2238      	movs	r2, #56	; 0x38
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d103      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2238      	movs	r2, #56	; 0x38
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b18      	cmp	r3, #24
 8001b1a:	d103      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b1c:	23fa      	movs	r3, #250	; 0xfa
 8001b1e:	01db      	lsls	r3, r3, #7
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	e001      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b28:	693b      	ldr	r3, [r7, #16]
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b006      	add	sp, #24
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	40021000 	.word	0x40021000
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	007a1200 	.word	0x007a1200

08001b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b48:	2313      	movs	r3, #19
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b50:	2312      	movs	r3, #18
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	029b      	lsls	r3, r3, #10
 8001b60:	4013      	ands	r3, r2
 8001b62:	d100      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b64:	e0a3      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2011      	movs	r0, #17
 8001b68:	183b      	adds	r3, r7, r0
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4ba5      	ldr	r3, [pc, #660]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	055b      	lsls	r3, r3, #21
 8001b76:	4013      	ands	r3, r2
 8001b78:	d110      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4ba2      	ldr	r3, [pc, #648]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7e:	4ba1      	ldr	r3, [pc, #644]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	0549      	lsls	r1, r1, #21
 8001b84:	430a      	orrs	r2, r1
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b88:	4b9e      	ldr	r3, [pc, #632]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	055b      	lsls	r3, r3, #21
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b9c:	4b9a      	ldr	r3, [pc, #616]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b99      	ldr	r3, [pc, #612]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	0049      	lsls	r1, r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001baa:	f7ff f811 	bl	8000bd0 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb4:	f7ff f80c 	bl	8000bd0 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d904      	bls.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001bc2:	2313      	movs	r3, #19
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	701a      	strb	r2, [r3, #0]
        break;
 8001bca:	e005      	b.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bcc:	4b8e      	ldr	r3, [pc, #568]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0ed      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001bd8:	2313      	movs	r3, #19
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d154      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be6:	23c0      	movs	r3, #192	; 0xc0
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d019      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d014      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bfe:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	4a82      	ldr	r2, [pc, #520]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	0249      	lsls	r1, r1, #9
 8001c12:	430a      	orrs	r2, r1
 8001c14:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c1c:	497c      	ldr	r1, [pc, #496]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c22:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d016      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffce 	bl	8000bd0 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c38:	e00c      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7fe ffc9 	bl	8000bd0 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4a73      	ldr	r2, [pc, #460]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d904      	bls.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c4a:	2313      	movs	r3, #19
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2203      	movs	r2, #3
 8001c50:	701a      	strb	r2, [r3, #0]
            break;
 8001c52:	e004      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c54:	4b6b      	ldr	r3, [pc, #428]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d0ed      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c5e:	2313      	movs	r3, #19
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10a      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c76:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c7c:	e00c      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c7e:	2312      	movs	r3, #18
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2213      	movs	r2, #19
 8001c84:	18ba      	adds	r2, r7, r2
 8001c86:	7812      	ldrb	r2, [r2, #0]
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e005      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2213      	movs	r2, #19
 8001c92:	18ba      	adds	r2, r7, r2
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c98:	2311      	movs	r3, #17
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ca6:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ca8:	495b      	ldr	r1, [pc, #364]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cb8:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	4a49      	ldr	r2, [pc, #292]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4013      	ands	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	4a42      	ldr	r2, [pc, #264]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4013      	ands	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d38:	4a3b      	ldr	r2, [pc, #236]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	01db      	lsls	r3, r3, #7
 8001d50:	4013      	ands	r3, r2
 8001d52:	d015      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	0899      	lsrs	r1, r3, #2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69da      	ldr	r2, [r3, #28]
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	05db      	lsls	r3, r3, #23
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d106      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0249      	lsls	r1, r1, #9
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	039b      	lsls	r3, r3, #14
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d016      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1a      	ldr	r2, [r3, #32]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	03db      	lsls	r3, r3, #15
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d106      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0449      	lsls	r1, r1, #17
 8001db6:	430a      	orrs	r2, r1
 8001db8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	01db      	lsls	r3, r3, #7
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d106      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	0249      	lsls	r1, r1, #9
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001df4:	2312      	movs	r3, #18
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	fffffcff 	.word	0xfffffcff
 8001e10:	fffeffff 	.word	0xfffeffff
 8001e14:	00001388 	.word	0x00001388
 8001e18:	efffffff 	.word	0xefffffff
 8001e1c:	fffff3ff 	.word	0xfffff3ff
 8001e20:	fff3ffff 	.word	0xfff3ffff
 8001e24:	ffcfffff 	.word	0xffcfffff
 8001e28:	ffffcfff 	.word	0xffffcfff
 8001e2c:	ffbfffff 	.word	0xffbfffff
 8001e30:	ffff3fff 	.word	0xffff3fff

08001e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e04a      	b.n	8001edc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	223d      	movs	r2, #61	; 0x3d
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d107      	bne.n	8001e62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	223c      	movs	r2, #60	; 0x3c
 8001e56:	2100      	movs	r1, #0
 8001e58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7fe fd95 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	223d      	movs	r2, #61	; 0x3d
 8001e66:	2102      	movs	r1, #2
 8001e68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f000 fab1 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2248      	movs	r2, #72	; 0x48
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	223e      	movs	r2, #62	; 0x3e
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223f      	movs	r2, #63	; 0x3f
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2241      	movs	r2, #65	; 0x41
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2242      	movs	r2, #66	; 0x42
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2243      	movs	r2, #67	; 0x43
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2244      	movs	r2, #68	; 0x44
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2245      	movs	r2, #69	; 0x45
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2246      	movs	r2, #70	; 0x46
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2247      	movs	r2, #71	; 0x47
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	223d      	movs	r2, #61	; 0x3d
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	223d      	movs	r2, #61	; 0x3d
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d001      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e03d      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	223d      	movs	r2, #61	; 0x3d
 8001f00:	2102      	movs	r1, #2
 8001f02:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00a      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x50>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	05db      	lsls	r3, r3, #23
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d004      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x50>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d116      	bne.n	8001f62 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_TIM_Base_Start_IT+0xa4>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d016      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x90>
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d011      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	e008      	b.n	8001f74 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e000      	b.n	8001f76 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f74:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b004      	add	sp, #16
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40000400 	.word	0x40000400
 8001f88:	00010007 	.word	0x00010007

08001f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d124      	bne.n	8001fec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d11d      	bne.n	8001fec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	4252      	negs	r2, r2
 8001fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 f9ec 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e007      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 f9df 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f9eb 	bl	80023bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d125      	bne.n	8002046 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2204      	movs	r2, #4
 8002002:	4013      	ands	r3, r2
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11e      	bne.n	8002046 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2205      	movs	r2, #5
 800200e:	4252      	negs	r2, r2
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	23c0      	movs	r3, #192	; 0xc0
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0018      	movs	r0, r3
 800202a:	f000 f9bf 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
 800202e:	e007      	b.n	8002040 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 f9b2 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f9be 	bl	80023bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2208      	movs	r2, #8
 800204e:	4013      	ands	r3, r2
 8002050:	2b08      	cmp	r3, #8
 8002052:	d124      	bne.n	800209e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2208      	movs	r2, #8
 800205c:	4013      	ands	r3, r2
 800205e:	2b08      	cmp	r3, #8
 8002060:	d11d      	bne.n	800209e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2209      	movs	r2, #9
 8002068:	4252      	negs	r2, r2
 800206a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2204      	movs	r2, #4
 8002070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f993 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
 8002086:	e007      	b.n	8002098 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f986 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f992 	bl	80023bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2210      	movs	r2, #16
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d125      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2210      	movs	r2, #16
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d11e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2211      	movs	r2, #17
 80020c0:	4252      	negs	r2, r2
 80020c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2208      	movs	r2, #8
 80020c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	23c0      	movs	r3, #192	; 0xc0
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f966 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
 80020e0:	e007      	b.n	80020f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f959 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f965 	bl	80023bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2201      	movs	r2, #1
 8002100:	4013      	ands	r3, r2
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10f      	bne.n	8002126 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2202      	movs	r2, #2
 800211a:	4252      	negs	r2, r2
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f7fe faf3 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	4013      	ands	r3, r2
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d10f      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	4013      	ands	r3, r2
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d108      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2281      	movs	r2, #129	; 0x81
 8002148:	4252      	negs	r2, r2
 800214a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 fac6 	bl	80026e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	401a      	ands	r2, r3
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	429a      	cmp	r2, r3
 8002166:	d10e      	bne.n	8002186 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	4013      	ands	r3, r2
 8002172:	2b80      	cmp	r3, #128	; 0x80
 8002174:	d107      	bne.n	8002186 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_TIM_IRQHandler+0x260>)
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f000 fab5 	bl	80026f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	4013      	ands	r3, r2
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d10f      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	4013      	ands	r3, r2
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d108      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2241      	movs	r2, #65	; 0x41
 80021a8:	4252      	negs	r2, r2
 80021aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f90c 	bl	80023cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2220      	movs	r2, #32
 80021bc:	4013      	ands	r3, r2
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d10f      	bne.n	80021e2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d108      	bne.n	80021e2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2221      	movs	r2, #33	; 0x21
 80021d6:	4252      	negs	r2, r2
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 fa77 	bl	80026d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	fffffeff 	.word	0xfffffeff

080021f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	230f      	movs	r3, #15
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	223c      	movs	r2, #60	; 0x3c
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_TIM_ConfigClockSource+0x20>
 800220c:	2302      	movs	r3, #2
 800220e:	e0bc      	b.n	800238a <HAL_TIM_ConfigClockSource+0x19a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	223c      	movs	r2, #60	; 0x3c
 8002214:	2101      	movs	r1, #1
 8002216:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	223d      	movs	r2, #61	; 0x3d
 800221c:	2102      	movs	r1, #2
 800221e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4a5a      	ldr	r2, [pc, #360]	; (8002394 <HAL_TIM_ConfigClockSource+0x1a4>)
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4a59      	ldr	r2, [pc, #356]	; (8002398 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	0192      	lsls	r2, r2, #6
 8002248:	4293      	cmp	r3, r2
 800224a:	d040      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0xde>
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	0192      	lsls	r2, r2, #6
 8002250:	4293      	cmp	r3, r2
 8002252:	d900      	bls.n	8002256 <HAL_TIM_ConfigClockSource+0x66>
 8002254:	e088      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	0152      	lsls	r2, r2, #5
 800225a:	4293      	cmp	r3, r2
 800225c:	d100      	bne.n	8002260 <HAL_TIM_ConfigClockSource+0x70>
 800225e:	e088      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x182>
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	0152      	lsls	r2, r2, #5
 8002264:	4293      	cmp	r3, r2
 8002266:	d900      	bls.n	800226a <HAL_TIM_ConfigClockSource+0x7a>
 8002268:	e07e      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 800226a:	2b70      	cmp	r3, #112	; 0x70
 800226c:	d018      	beq.n	80022a0 <HAL_TIM_ConfigClockSource+0xb0>
 800226e:	d900      	bls.n	8002272 <HAL_TIM_ConfigClockSource+0x82>
 8002270:	e07a      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 8002272:	2b60      	cmp	r3, #96	; 0x60
 8002274:	d04f      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0x126>
 8002276:	d900      	bls.n	800227a <HAL_TIM_ConfigClockSource+0x8a>
 8002278:	e076      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 800227a:	2b50      	cmp	r3, #80	; 0x50
 800227c:	d03b      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0x106>
 800227e:	d900      	bls.n	8002282 <HAL_TIM_ConfigClockSource+0x92>
 8002280:	e072      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d057      	beq.n	8002336 <HAL_TIM_ConfigClockSource+0x146>
 8002286:	d900      	bls.n	800228a <HAL_TIM_ConfigClockSource+0x9a>
 8002288:	e06e      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 800228a:	2b30      	cmp	r3, #48	; 0x30
 800228c:	d063      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0x166>
 800228e:	d86b      	bhi.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 8002290:	2b20      	cmp	r3, #32
 8002292:	d060      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0x166>
 8002294:	d868      	bhi.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d05d      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0x166>
 800229a:	2b10      	cmp	r3, #16
 800229c:	d05b      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0x166>
 800229e:	e063      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6899      	ldr	r1, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f000 f986 	bl	80025c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2277      	movs	r2, #119	; 0x77
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]
      break;
 80022cc:	e052      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f000 f96f 	bl	80025c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	01c9      	lsls	r1, r1, #7
 80022f0:	430a      	orrs	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]
      break;
 80022f4:	e03e      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	001a      	movs	r2, r3
 8002304:	f000 f8e0 	bl	80024c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2150      	movs	r1, #80	; 0x50
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f93a 	bl	8002588 <TIM_ITRx_SetConfig>
      break;
 8002314:	e02e      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	001a      	movs	r2, r3
 8002324:	f000 f8fe 	bl	8002524 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2160      	movs	r1, #96	; 0x60
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f92a 	bl	8002588 <TIM_ITRx_SetConfig>
      break;
 8002334:	e01e      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	001a      	movs	r2, r3
 8002344:	f000 f8c0 	bl	80024c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2140      	movs	r1, #64	; 0x40
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f91a 	bl	8002588 <TIM_ITRx_SetConfig>
      break;
 8002354:	e00e      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0019      	movs	r1, r3
 8002360:	0010      	movs	r0, r2
 8002362:	f000 f911 	bl	8002588 <TIM_ITRx_SetConfig>
      break;
 8002366:	e005      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002368:	230f      	movs	r3, #15
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
      break;
 8002370:	e000      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002372:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	223d      	movs	r2, #61	; 0x3d
 8002378:	2101      	movs	r1, #1
 800237a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	223c      	movs	r2, #60	; 0x3c
 8002380:	2100      	movs	r1, #0
 8002382:	5499      	strb	r1, [r3, r2]

  return status;
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	ffceff88 	.word	0xffceff88
 8002398:	ffff00ff 	.word	0xffff00ff

0800239c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a30      	ldr	r2, [pc, #192]	; (80024b0 <TIM_Base_SetConfig+0xd4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d008      	beq.n	8002406 <TIM_Base_SetConfig+0x2a>
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	05db      	lsls	r3, r3, #23
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0x2a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2c      	ldr	r2, [pc, #176]	; (80024b4 <TIM_Base_SetConfig+0xd8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d108      	bne.n	8002418 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2270      	movs	r2, #112	; 0x70
 800240a:	4393      	bics	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <TIM_Base_SetConfig+0xd4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d014      	beq.n	800244a <TIM_Base_SetConfig+0x6e>
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	429a      	cmp	r2, r3
 8002428:	d00f      	beq.n	800244a <TIM_Base_SetConfig+0x6e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <TIM_Base_SetConfig+0xd8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00b      	beq.n	800244a <TIM_Base_SetConfig+0x6e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <TIM_Base_SetConfig+0xdc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <TIM_Base_SetConfig+0x6e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <TIM_Base_SetConfig+0xe0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d003      	beq.n	800244a <TIM_Base_SetConfig+0x6e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <TIM_Base_SetConfig+0xe4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d108      	bne.n	800245c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <TIM_Base_SetConfig+0xe8>)
 800244e:	4013      	ands	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	4393      	bics	r3, r2
 8002462:	001a      	movs	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <TIM_Base_SetConfig+0xd4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <TIM_Base_SetConfig+0xbe>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <TIM_Base_SetConfig+0xe0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d003      	beq.n	800249a <TIM_Base_SetConfig+0xbe>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <TIM_Base_SetConfig+0xe4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d103      	bne.n	80024a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	615a      	str	r2, [r3, #20]
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40002000 	.word	0x40002000
 80024bc:	40014400 	.word	0x40014400
 80024c0:	40014800 	.word	0x40014800
 80024c4:	fffffcff 	.word	0xfffffcff

080024c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	2201      	movs	r2, #1
 80024e0:	4393      	bics	r3, r2
 80024e2:	001a      	movs	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	22f0      	movs	r2, #240	; 0xf0
 80024f2:	4393      	bics	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	220a      	movs	r2, #10
 8002504:	4393      	bics	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	621a      	str	r2, [r3, #32]
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b006      	add	sp, #24
 8002522:	bd80      	pop	{r7, pc}

08002524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	2210      	movs	r2, #16
 8002536:	4393      	bics	r3, r2
 8002538:	001a      	movs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <TIM_TI2_ConfigInputStage+0x60>)
 800254e:	4013      	ands	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	031b      	lsls	r3, r3, #12
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	22a0      	movs	r2, #160	; 0xa0
 8002560:	4393      	bics	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	621a      	str	r2, [r3, #32]
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	ffff0fff 	.word	0xffff0fff

08002588 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <TIM_ITRx_SetConfig+0x34>)
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	2207      	movs	r2, #7
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	609a      	str	r2, [r3, #8]
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b004      	add	sp, #16
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	ffcfff8f 	.word	0xffcfff8f

080025c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <TIM_ETR_SetConfig+0x3c>)
 80025d8:	4013      	ands	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b006      	add	sp, #24
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	ffff00ff 	.word	0xffff00ff

08002600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	223c      	movs	r2, #60	; 0x3c
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002614:	2302      	movs	r3, #2
 8002616:	e050      	b.n	80026ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	223c      	movs	r2, #60	; 0x3c
 800261c:	2101      	movs	r1, #1
 800261e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	223d      	movs	r2, #61	; 0x3d
 8002624:	2102      	movs	r1, #2
 8002626:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d108      	bne.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2270      	movs	r2, #112	; 0x70
 8002658:	4393      	bics	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00a      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	05db      	lsls	r3, r3, #23
 8002680:	429a      	cmp	r2, r3
 8002682:	d004      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10c      	bne.n	80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	4393      	bics	r3, r2
 8002694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4313      	orrs	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	223d      	movs	r2, #61	; 0x3d
 80026ac:	2101      	movs	r1, #1
 80026ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	223c      	movs	r2, #60	; 0x3c
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b004      	add	sp, #16
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	ff0fffff 	.word	0xff0fffff
 80026cc:	40000400 	.word	0x40000400

080026d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}

08002700 <__libc_init_array>:
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	2600      	movs	r6, #0
 8002704:	4d0c      	ldr	r5, [pc, #48]	; (8002738 <__libc_init_array+0x38>)
 8002706:	4c0d      	ldr	r4, [pc, #52]	; (800273c <__libc_init_array+0x3c>)
 8002708:	1b64      	subs	r4, r4, r5
 800270a:	10a4      	asrs	r4, r4, #2
 800270c:	42a6      	cmp	r6, r4
 800270e:	d109      	bne.n	8002724 <__libc_init_array+0x24>
 8002710:	2600      	movs	r6, #0
 8002712:	f000 f821 	bl	8002758 <_init>
 8002716:	4d0a      	ldr	r5, [pc, #40]	; (8002740 <__libc_init_array+0x40>)
 8002718:	4c0a      	ldr	r4, [pc, #40]	; (8002744 <__libc_init_array+0x44>)
 800271a:	1b64      	subs	r4, r4, r5
 800271c:	10a4      	asrs	r4, r4, #2
 800271e:	42a6      	cmp	r6, r4
 8002720:	d105      	bne.n	800272e <__libc_init_array+0x2e>
 8002722:	bd70      	pop	{r4, r5, r6, pc}
 8002724:	00b3      	lsls	r3, r6, #2
 8002726:	58eb      	ldr	r3, [r5, r3]
 8002728:	4798      	blx	r3
 800272a:	3601      	adds	r6, #1
 800272c:	e7ee      	b.n	800270c <__libc_init_array+0xc>
 800272e:	00b3      	lsls	r3, r6, #2
 8002730:	58eb      	ldr	r3, [r5, r3]
 8002732:	4798      	blx	r3
 8002734:	3601      	adds	r6, #1
 8002736:	e7f2      	b.n	800271e <__libc_init_array+0x1e>
 8002738:	080027b0 	.word	0x080027b0
 800273c:	080027b0 	.word	0x080027b0
 8002740:	080027b0 	.word	0x080027b0
 8002744:	080027b4 	.word	0x080027b4

08002748 <memset>:
 8002748:	0003      	movs	r3, r0
 800274a:	1882      	adds	r2, r0, r2
 800274c:	4293      	cmp	r3, r2
 800274e:	d100      	bne.n	8002752 <memset+0xa>
 8002750:	4770      	bx	lr
 8002752:	7019      	strb	r1, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	e7f9      	b.n	800274c <memset+0x4>

08002758 <_init>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr

08002764 <_fini>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr
